version: 2
workflows:
  version: 2
  build-docker-image:
    jobs:
      - build
      - docker-push:
          filters:
            tags:
              only: /.*/
jobs:
  build:
    working_directory: /go/src/github.com/Financial-Times/publish-carousel
    docker:
      - image: golang:1.7.5
        environment:
          GOPATH: /go
          MONGO_TEST_URL: localhost:27017
          ETCD_TEST_URL: http://localhost:2379
      - image: mongo:3.0.2
      - image: quay.io/coreos/etcd:v2.3.7
    steps:
      - checkout
      - run:
          name: External Dependencies
          command: |
            go get github.com/mattn/goveralls
            go get -u github.com/jstemmer/go-junit-report
            go get -u github.com/kardianos/govendor
      - run:
          name: Test Results
          command: |
            mkdir -p /tmp/test-results
            mkdir -p /tmp/coverage-results
      - run:
          name: Govendor Sync
          command: govendor sync -v
      - run:
          name: Go Build
          command: go build -v
      - run:
          name: Run Tests
          command: |
            go test -v -cover -race -coverprofile=/tmp/coverage-results/coverage.out .
            go list ./... | grep -v vendor | awk -F/ '{print $4}' | xargs -I {} go test -v -cover -race -coverprofile=/tmp/coverage-results/coverage_{}.out ./{}
            mkdir -p /tmp/test-results/
            go test -v -race . | /go/bin/go-junit-report > /tmp/test-results/main.xml
            go list ./... | grep -v vendor | awk -F/ '{print $4}' | xargs -I {} go test -v -race ./{} | /go/bin/go-junit-report > /tmp/test-results/{}.xml
      - run:
          name: Combine Coverage Results
          command: |
            sed -i '1d' /tmp/coverage-results/*.out
            echo "mode: atomic" > /tmp/coverage-results/overall-coverage.result
            cat /tmp/coverage-results/*.out >> /tmp/coverage-results/overall-coverage.result
      - run:
          name: Upload Coverage
          command: /go/bin/goveralls -coverprofile=/tmp/coverage-results/overall-coverage.result -service=circle-ci -repotoken=$COVERALLS_TOKEN
      - store_test_results:
          path: /tmp/test-results
  docker-push:
    working_directory: /publish-carousel
    docker:
      - image: docker:1.12.6-git
    steps:
      - checkout
      - setup_docker_engine
      - run:
          name: Set Docker image tag based on branch or git tag
          command: |
            if [ ! -z "${CIRCLE_TAG}" ] ; then
              echo 'export DOCKER_TAG=${CIRCLE_TAG}' >> $BASH_ENV
            elif [ "${CIRCLE_BRANCH}" == "master" ] ; then
              echo 'export DOCKER_TAG=latest' >> $BASH_ENV
            else
              echo 'export DOCKER_TAG=$( echo ${CIRCLE_BRANCH} | cut -f 2 -d / )' >> $BASH_ENV
            fi
      - run:
          name: Build Docker image
          command: |
            source ${BASH_ENV}
            docker build \
            --build-arg SONATYPE_USER=${SONATYPE_USER} \
            --build-arg SONATYPE_PASSWORD=${SONATYPE_PASSWORD} \
            --tag nexus.in.ft.com:5000/coco/${CIRCLE_PROJECT_REPONAME}:${DOCKER_TAG} .
      - deploy:
          name: Push Docker image
          command: |
            source ${BASH_ENV}
            docker login nexus.in.ft.com:5000 -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
            docker push nexus.in.ft.com:5000/coco/${CIRCLE_PROJECT_REPONAME}:${DOCKER_TAG}
